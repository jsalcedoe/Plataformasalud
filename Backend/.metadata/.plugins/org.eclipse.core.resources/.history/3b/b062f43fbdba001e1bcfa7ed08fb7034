package com.js.plataformasalud.modelos.controlador;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.js.plataformasalud.modelos.entidades.Cargo;
import com.js.plataformasalud.modelos.entidades.Ubicacion;
import com.js.plataformasalud.modelos.servicios.IUbicaServiceImpl;

import lombok.AllArgsConstructor;

@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
@AllArgsConstructor

public class UbicaRestController {
	
	private IUbicaServiceImpl ubicaservice;
	
	@GetMapping("/ubicaciones")
	@ResponseStatus(code = HttpStatus.OK)
	public List<Ubicacion> index(){
		return ubicaservice.findAll();
	}
	
	@GetMapping("/ubicaciones/{idubicaciones}")
	public ResponseEntity<?> mostrar(@PathVariable Long idubicacion) {
		
			Ubicacion ubica = null;
			Map<String, Object> response = new HashMap<>();
		
			try {
				ubica = ubicaservice.findById(idubicacion);
			}catch(DataAccessException e) {
				response.put("mensaje", "Error al realizar la consulta en la base de datos");
				response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			}
			if (ubica == null) {
				response.put("mensaje", "La ubicaci√≥n ID: ".concat(idubicacion.toString().concat(" no existe en la base de datos!")));
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
			}
			return new ResponseEntity<Ubicacion>(ubica, HttpStatus.OK);
		}
	}
	
	@PostMapping("/ubicaciones")
	@ResponseStatus(code = HttpStatus.CREATED)
	public Ubicacion crear (@RequestBody Ubicacion ubica) {
		return ubicaservice.save(ubica);
	}
	
	@PutMapping("/ubicaciones/{idubicaciones}")
	@ResponseStatus(code = HttpStatus.OK)
	public Ubicacion update (@RequestBody Ubicacion ubica, @PathVariable Long idubicaciones) {
		Ubicacion ubicaActual = ubicaservice.findById(idubicaciones);
		
		ubicaActual.setNomubicaciones(ubica.getNomubicaciones());
		
		return ubicaservice.save(ubicaActual);
	}

}
