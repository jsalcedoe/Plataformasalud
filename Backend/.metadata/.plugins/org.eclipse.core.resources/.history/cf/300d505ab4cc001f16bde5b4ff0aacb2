package com.js.plataformasalud.modelos.controlador;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import com.js.plataformasalud.modelos.entidades.OrdenMedicamentoInsumo;
import com.js.plataformasalud.modelos.servicios.IOrdenMedicamentoInsumoServiceImpl;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
@AllArgsConstructor

public class OrdenMedicamentoInsumoRestController {
	
	private IOrdenMedicamentoInsumoServiceImpl ordmedinserv;
	
	@GetMapping("/ordenmedicamentoinsumo")
	@ResponseStatus(code = HttpStatus.OK)
	public List<OrdenMedicamentoInsumo> index(){
		return ordmedinserv.findAll();
	}
	
	@GetMapping("/ordenmedicamentoinsumo/{idordmedins}")
	public ResponseEntity<?> mostrar (@PathVariable Long idordmedins){
		OrdenMedicamentoInsumo ordmedins = null;
		Map<String, Object> response = new HashMap<>();
		
		try {
				ordmedins = ordmedinserv.findById(idordmedins);
			} catch(DataAccessException e) {
		response.put("mensaje", "Error al realizar la consulta en la base de datos");
		response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	if(ordmedins == null) {
		response.put("mensaje", "La orden ID: ".concat(idordmedins.toString().concat(" no existe en la base de datos!")));
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
	}
	
	return new ResponseEntity<OrdenMedicamentoInsumo>(ordmedins, HttpStatus.OK);
	
}
	
	@PostMapping("/ordenmedicamentoinsumo")
	public ResponseEntity<?> crear (@Valid @RequestBody OrdenMedicamentoInsumo ordmedins, BindingResult validacion){
		OrdenMedicamentoInsumo ordmedinsnew = null;
		Map<String, Object> response = new HashMap<>();
		
		if(validacion.hasErrors()) {

			List<String> errors = validacion.getFieldErrors()
					.stream()
					.map(err -> "El campo '" + err.getField() +"' "+ err.getDefaultMessage())
					.collect(Collectors.toList());
			
			response.put("errors", errors);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.BAD_REQUEST);
		}
		
		try {
			ordmedinsnew = ordmedinserv.save(ordmedins);
		} catch(DataAccessException e) {
			response.put("mensaje", "Error al realizar el insert en la base de datos");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		response.put("mensaje", "La orden ha sido creada con Ã©xito!");
		response.put("OrdenMedicamentoInsumo", ordmedinsnew);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
	}
	
	

}
