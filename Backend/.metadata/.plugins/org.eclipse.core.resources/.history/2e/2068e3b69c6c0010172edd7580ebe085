package com.js.plataformasalud.modelos.controlador;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.js.plataformasalud.modelos.entidades.DescripcionQuirurgica;
import com.js.plataformasalud.modelos.entidades.DescripcionQuirurgicaDTO;
import com.js.plataformasalud.modelos.entidades.EvolucionEvento;
import com.js.plataformasalud.modelos.entidades.EvolucionEventoDTO;
import com.js.plataformasalud.modelos.servicios.IDescripcionQuirurgicaDTOServiceImpl;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
@AllArgsConstructor

public class DescripcionQuirurgicaDTORestController {
	
	private final IDescripcionQuirurgicaDTOServiceImpl desqxserv;
	
	// GET: Obtener descripcion quirurgica + procedimientos + equipo + diagnósticos por ID
	
	 @GetMapping("/descripcionqxcompleta/{idqx}")
	    public ResponseEntity<?> getDescripcionQuirurgicaDTO(@PathVariable Long idqx) throws NoSuchElementException {
	        Map<String, Object> response = new HashMap<>();
	        DescripcionQuirurgicaDTO dto;

	        try {
	            dto = desqxserv.findByFkId(idqx);
	        } catch (RuntimeException e) {
	            response.put("mensaje", "No se encontró la descripcion quirurgica con el ID: " + idqx);
	            response.put("error", e.getMessage());
	            return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
	        }

	        return new ResponseEntity<>(dto, HttpStatus.OK);
	    }
	 
	// POST: Guardar la descripcion quirurgica + procedimientos + equipo + diagnósticos
		
	    @PostMapping("/descripcionqxcompleta")
	    public ResponseEntity<?> saveDescripcionQuirurgicaDTO(@Valid @RequestBody DescripcionQuirurgicaDTO dto, BindingResult result) 
	    {
	        Map<String, Object> response = new HashMap<>();
	        DescripcionQuirurgica savedxqx;

	        if (result.hasErrors()) {
	            List<String> errors = result.getFieldErrors()
	                .stream()
	                .map(err -> "El campo '" + err.getField() + "' " + err.getDefaultMessage())
	                .collect(Collectors.toList());

	            response.put("errors", errors);
	            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
	        }

	        try {
	            savedxqx = desqxserv.save(dto);
	        } catch (DataAccessException e) {
	            response.put("mensaje", "Error al guardar en la base de datos");
	            response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
	            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
	        } catch (Exception ex) {
	            response.put("mensaje", "Error inesperado al registrar la descripcion quirurgica");
	            response.put("error", ex.getMessage());
	            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
	        }

	        response.put("mensaje", "¡La descripcion quirurgica ha sido creada con éxito!");
	        response.put("DescripcionQuirurgica", savedxqx);
	        return new ResponseEntity<>(response, HttpStatus.CREATED);
	    }
	    
	    // PUT: Editar descripcion quirurgica + equipo + procedimientos + diagnosticos
	    
	    @PutMapping("/evolucionclinicacompleta/{idevol}")
	    public ResponseEntity<?> updateDescripcionQuirurgicaDTO(@PathVariable Long idqx,@Valid @RequestBody DescripcionQuirurgicaDTO dto, BindingResult result)
	    {
	    	Map<String, Object> response = new HashMap<>();
	    	if (result.hasErrors())
	    	{
	    		List<String> errors = result.getFieldErrors()
	    		.stream()
	    		.map(err -> "El campo '" + err.getField() + "' " + err.getDefaultMessage())
	    		.collect(Collectors.toList());
	    		response.put("errors", errors);
	    		return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
	    	}
	    	try {
	    			// Verificar existencia usando el servicio
	    			DescripcionQuirurgicaDTO existingDto = desqxserv.findByFkId(idqx);
	    			if (existingDto == null || existingDto.getDescripcionQuirurgicadto() == null)
	    			{
	    				response.put("mensaje", "No existe la Descripcion Quirurgica con ID: " + idqx);
	    				return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
	    			}

			    	// Asignar ID
			    	
	    			dto.getDescripcionQuirurgicadto().setIdqx(idqx);
		
			    	// Asignar IDs a diagnósticos que pertenecen a esta HC
			    	
			    	if (dto.getDxdexqxdto() != null) {
			            
			    		dto.getDxdexqxdto().forEach(dx -> {
			                if (dx.getDesqx_fk() == null || !dx.getDesqx_fk().getIdqx().equals(idqx)) {
			                    
			         
			                	dx.setDesqx_fk(dto.getDescripcionQuirurgicadto());
			                }
			            });
			        }
			    	if (dto.getEquipoQxdto() != null) {
			            
			    		dto.getEquipoQxdto().forEach(eq -> {
			                if (eq.getDesqx_fk() == null || !eq.getDesqx_fk().getIdqx().equals(idqx)) {
			                    
			         
			                	eq.setDesqx_fk(dto.getDescripcionQuirurgicadto());
			                }
			            });
			        }
			    	
			    	if (dto.getPxdto() != null) {
			            
			    		dto.getPxdto().forEach(px -> {
			                if (px.getDescqx_fk() == null || !px.getDescqx_fk().getIdqx().equals(idqx)) {
			                    
			         
			                	px.setDescqx_fk(dto.getDescripcionQuirurgicadto());
			                }
			            });
			        }
			    	
			    	
		
			    	 DescripcionQuirurgica updated = desqxserv.save(dto);
			         response.put("mensaje", "¡La descripcion quirurgica fue actualizada con éxito!");
			         response.put("DescripcionQuirurgica", updated);
			         return new ResponseEntity<>(response, HttpStatus.OK);
			     } catch (DataAccessException e) {
			         response.put("mensaje", "Error al actualizar en la base de datos");
			         response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			         return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			     } catch (RuntimeException e) {
			         response.put("mensaje", "No se encontró la evolucion clínica");
			         response.put("error", e.getMessage());
			         return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
			     }
	 }

	
    
	
	

    
}
