package com.js.plataformasalud.modelos.entidades;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.Period;
import java.util.Date;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PostPersist;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.NotEmpty;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Entity
@Table (name = "pac")

public class Paciente implements Serializable {
	@Id
	@Column(nullable = false, unique = true )
	private Long numdocpac;
	
	@Column (nullable = false, length = 15 )
	@NotEmpty(message = "El campo no puede ser vacio, digite el primer nombre")
	private String primernompac;
	
	private String segundonompac;
	
	@Column (nullable = false, length = 15 )
	@NotEmpty (message = "El campo no puede ser vacio, digite el primer apellido")
	private String primerapepac;
	
	private String segundoapepac;
	
	@Column (nullable = false, length = 10 )
	@NotEmpty (message = "El campo no puede ser vacio, seleccione el sexo del paciente")
	private String sexopac;
	
	@Temporal(TemporalType.DATE)
	@NotEmpty(message = "El campo fecha de nacimiento no puede ser vacio")
	private LocalDate fechanacpac;
	
	@Column (nullable = false, length = 3 )
	private long edadpac;
	
	@PostPersist
	private void calculaedad() {
		if(fechanacpac != null) {
			LocalDate fechaactual = LocalDate.now();
			Period periodo = Period.between(fechanacpac, fechaactual);
			edadpac = (long) periodo.getYears();
		}
	}
	
	@Column (nullable = false)
	@NotEmpty(message = "El campo estado civil no puede ser vacio, por favor seleccione el estado civil")
	private String estadocivilpac;
	
	@Column (nullable = false, length = 40 )
	@NotEmpty(message = "El campo direccion del paciente no puede ser vacio, por favor digite la direcci√≥n")
	private String direccionpac;
	
	@Column (nullable = false, length = 40 )
	@NotEmpty(message = "El campo email no puede ser vacio, por favor digite el email del paciente")
	private String emailpac;
		
	@Column (nullable = false, length = 15 )
	private String contactopac;
	
	@Column (nullable = false, length = 30 )
	private String acudientepac;
	
	@Column (nullable = false, length = 15 )
	private String contactoacudientepac;
	
	@Temporal(TemporalType.DATE)
	private Date fechacreacionpac;
	
	@PrePersist
	public void prePersis() {
		fechacreacionpac = new Date();
	}
	
	@Temporal(TemporalType.DATE)
	private Date fechaedipac;
	
	@PreUpdate
	public void fechaedit() {
		fechaedipac = new Date();
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JsonIgnoreProperties({"hibernateLazyInitializer","handler"})
	private TipoDocumento typdocpac;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JsonIgnoreProperties({"hibernateLazyInitializer","handler"})
	private Ciudad ciudad;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JsonIgnoreProperties({"hibernateLazyInitializer","handler"})
	private TipoPaciente tipac;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JsonIgnoreProperties({"hibernateLazyInitializer","handler"})
	private Entidad entidad;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JsonIgnoreProperties({"hibernateLazyInitializer","handler"})
	private Estado estpac_fk;
	
	
	private static final long serialVersionUID = 1L;

}
