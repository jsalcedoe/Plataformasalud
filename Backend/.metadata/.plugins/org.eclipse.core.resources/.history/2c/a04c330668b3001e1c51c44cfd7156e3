package com.js.plataformasalud.modelos.controlador;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.js.plataformasalud.modelos.entidades.Estado;
import com.js.plataformasalud.modelos.entidades.TipoPaciente;
import com.js.plataformasalud.modelos.servicios.ITipoPacienteServiceImpl;

import lombok.AllArgsConstructor;

@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
@AllArgsConstructor
public class TipoPacienteRestController {
	
	private ITipoPacienteServiceImpl tipacserv;

	@GetMapping("/tipopaciente")
	public List<TipoPaciente> index(){
		return (List<TipoPaciente>) tipacserv.findAll();
	}
	
	@GetMapping("/tipopaciente/{idtipac}")
	public ResponseEntity<?> mostrar (@PathVariable Long idtipac){
		TipoPaciente tipac = null;
		Map<String, Object> response = new HashMap<>();
		
		try {
				tipac = tipacserv.findById(idtipac); 
			} catch(DataAccessException e) {
		response.put("mensaje", "Error al realizar la consulta en la base de datos");
		response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	if(tipac == null) {
		response.put("mensaje", "El tipo de paciente ID: ".concat(idtipac.toString().concat(" no existe en la base de datos!")));
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
	}
	
	return new ResponseEntity<TipoPaciente>(tipac, HttpStatus.OK);
	}
	
	@PostMapping("/tipopaciente")
	@ResponseStatus(code = HttpStatus.CREATED)
	public TipoPaciente crear(@RequestBody TipoPaciente tipac) {
		return tipacserv.save(tipac);
	}
	
	@PutMapping("/tipopaciente/{idtipac}")
	@ResponseStatus(code = HttpStatus.OK)
	public TipoPaciente update (@PathVariable long idtipac,@RequestBody TipoPaciente tipac) {
		TipoPaciente tipacAct = tipacserv.findById(idtipac);
		
		tipacAct.setNomtipac(tipac.getNomtipac());
		
		return tipacserv.save(tipacAct);
	}
	
	
	
	

}
