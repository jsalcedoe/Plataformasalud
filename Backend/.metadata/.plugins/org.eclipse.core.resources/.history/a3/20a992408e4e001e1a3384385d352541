package com.js.plataformasalud.modelos.controlador;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.js.plataformasalud.modelos.entidades.Agenda;
import com.js.plataformasalud.modelos.servicios.IAgendaServiceImpl;

import lombok.AllArgsConstructor;

@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
@AllArgsConstructor


public class AgendaRestController {
	
	private IAgendaServiceImpl agmedserv;

	@GetMapping("/agenda")
	@ResponseStatus(code = HttpStatus.OK)
	public List<Agenda> index(){
		return agmedserv.findAll();
	}
	
	@GetMapping("/agenda/{idagmed}")
	/*@ResponseStatus(code = HttpStatus.OK)
	public Agenda mostrar(@PathVariable Long idagmed) {
		return agmedserv.findById(idagmed);
	}*/
	public ResponseEntity<?> mostrar (@PathVariable Long idagmed){
		Agenda agenda = null;
		Map<String, Object> response = new HashMap<>();
		
		try {
			agenda = agmedserv.findById(idagmed);
		} catch(DataAccessException e) {
			response.put("mensaje", "Error al realizar la consulta en la base de datos");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		if(agenda == null) {
			response.put("mensaje", "La agenda ID: ".concat(id.toString().concat(" no existe en la base de datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		
		return new ResponseEntity<Agenda>(agenda, HttpStatus.OK);
		
	}
	
	
	@PostMapping("/agenda")
	@ResponseStatus(code = HttpStatus.CREATED)
	public Agenda crear (@RequestBody Agenda agmed) {
		return agmedserv.save(agmed);
	}
	
	@PutMapping("/agenda/{idagmed}")
	@ResponseStatus(code = HttpStatus.OK)
	public Agenda actualiza (@RequestBody Agenda agmed, @PathVariable Long idagmed) {
		Agenda AgendaActual = agmedserv.findById(idagmed);
		
		AgendaActual.setConsagmed(agmed.getConsagmed());
		AgendaActual.setCupscita(agmed.getCupscita());
		AgendaActual.setFechaagmed(agmed.getFechaagmed());
		AgendaActual.setHorafinagmed(agmed.getHorafinagmed());
		AgendaActual.setHorainiagmed(agmed.getHorainiagmed());
		AgendaActual.setIntervtempagmed(agmed.getIntervtempagmed());
		AgendaActual.setMediagmed(agmed.getMediagmed());
		AgendaActual.setTotalcitasagmed(agmed.getTotalcitasagmed());
		
		return agmedserv.save(AgendaActual);
	}

	
	

}
