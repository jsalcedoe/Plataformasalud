package com.js.plataformasalud.modelos.controlador;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.js.plataformasalud.modelos.entidades.RegistroHistoriaClinica;
import com.js.plataformasalud.modelos.servicios.IRegistroHistoriaClinicaServiceImpl;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
@AllArgsConstructor

public class RegistroHistoriaClinicaRestController {
	
	private IRegistroHistoriaClinicaServiceImpl reghcpacserv;
	
	@GetMapping("/registrohcpac")
	@ResponseStatus(code = HttpStatus.OK)
	public List<RegistroHistoriaClinica> index(){
		
		return reghcpacserv.findAll();
		
	}
	
	@GetMapping("registrohcpac/{idreghcpac}")
	public ResponseEntity<?> mostrar(@PathVariable Long idreghcpac) {
		RegistroHistoriaClinica reghcpac = null;
		Map<String, Object> response = new HashMap<>();
	
		try {
			reghcpac = reghcpacserv.findById(idreghcpac);
		}catch(DataAccessException e) {
			response.put("mensaje", "Error al realizar la consulta en la base de datos");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		if (reghcpac == null) {
			response.put("mensaje", "El registro de historia clinica ID: ".concat(idreghcpac.toString().concat(" no existe en la base de datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<RegistroHistoriaClinica>(reghcpac, HttpStatus.OK);
	}
	
	@PostMapping("/registrohcpac")
	public ResponseEntity<?> save (@Valid @RequestBody RegistroHistoriaClinica reghcpac, BindingResult result) {
		RegistroHistoriaClinica Newreghcpac = null;
		Map<String, Object> response = new HashMap<>();
		if(result.hasErrors()) {
			List<String> errors = result.getFieldErrors()
					.stream()
					.map(err -> "El campo '" + err.getField() +"' "+ err.getDefaultMessage())
					.collect(Collectors.toList());
			
			response.put("errors", errors);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.BAD_REQUEST);
		}
		try {
				Newreghcpac= reghcpacserv.save(reghcpac);
		}catch(DataAccessException e) {
			response.put("mensaje", "Error al registrar el registro de historia clinica en la base de datos");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			
		}
		response.put("mensaje", "El registro de historia clinica ha sido creado con éxito!");
		response.put("cargo", Newreghcpac);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
	}
	
	@PutMapping("registrohcpac/{idreghcpac}")
	public ResponseEntity <?> actualizar (@PathVariable Long idreghcpac,@RequestBody RegistroHistoriaClinica reghcpac, BindingResult result) {
		
		RegistroHistoriaClinica reghcpacUpdate = null;
		RegistroHistoriaClinica reghcpacAct = reghcpacserv.findById(idreghcpac);
		Map<String, Object> response = new HashMap<>();

		if(result.hasErrors()) {

			List<String> errors = result.getFieldErrors()
					.stream()
					.map(err -> "El campo '" + err.getField() +"' "+ err.getDefaultMessage())
					.collect(Collectors.toList());
			
			response.put("errors", errors);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.BAD_REQUEST);
		}
		
		if (reghcpacAct == null) {
			response.put("mensaje", "Error: no se pudo editar, el registro de historia clinica ID: "
					.concat(idreghcpac.toString().concat(" no existe en la base de datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		try {
			reghcpacAct.setDateendreghcpac(reghcpac.getDateendreghcpac());
			reghcpacAct.setDateinitreghcpac(reghcpac.getDateinitreghcpac());
			reghcpacAct.setDxreghcpac_fk(reghcpac.getDxreghcpac_fk());
			reghcpacAct.setEstreghcpac_fk(reghcpac.getEstreghcpac_fk());
			reghcpacAct.setOrgdestreghcpac_fk(reghcpac.getOrgdestreghcpac_fk());
			reghcpacAct.setRegpac_fk(reghcpac.getRegpac_fk());
			
			reghcpacUpdate = reghcpacserv.save(reghcpacAct);
			
			}catch(DataAccessException e) {
				response.put("mensaje", "Error al actualizar el registro de historia clinica en la base de datos");
				response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			}
		response.put("mensaje", "El registro de historia clinica ha sido actualizado con éxito!");
		response.put("cargo", reghcpacUpdate);

		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
	}

}
